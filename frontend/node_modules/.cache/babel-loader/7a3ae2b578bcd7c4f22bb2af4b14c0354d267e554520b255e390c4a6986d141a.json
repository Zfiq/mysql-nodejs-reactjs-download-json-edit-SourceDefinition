{"ast":null,"code":"var _jsxFileName = \"/Users/omaga/Desktop/Current/SqlNodeReactJson 2/frontend/src/pages/Users.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Users = () => {\n  _s();\n  const [tableName, setTableName] = useState(\"\");\n  const [columns, setColumns] = useState([]);\n  const [sourceDefinition, setSourceDefinition] = useState({\n    Name: \"\",\n    columns: []\n  });\n  const [column_name_input, setColumn_name_input] = useState(\"\");\n  const [data_type_input, setData_type_input] = useState(\"\");\n  const fetchColumns = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8800/`);\n      console.log(response.data); // log response to console\n      const columns = response.data.map(col => ({\n        column_name: col.column_name,\n        data_type: col.data_type\n      }));\n      setColumns(columns);\n      setSourceDefinition({\n        ...sourceDefinition,\n        columns: columns\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const handleDownload = async () => {\n    try {\n      // Create a new object with the modified sourceDefinition\n      const updatedSourceDefinition = {\n        Name: sourceDefinition.Name,\n        columns: [...sourceDefinition.columns]\n      };\n      updatedSourceDefinition.columns = updatedSourceDefinition.columns.map(col => {\n        if (col.column_name === \"ID\") {\n          return {\n            ...col,\n            // Update the column name and data type based on user input\n            column_name: column_name_input,\n            data_type: data_type_input\n          };\n        }\n        return col;\n      });\n\n      // Convert the updated sourceDefinition to JSON format\n      const json = JSON.stringify(updatedSourceDefinition, null, 2);\n\n      // Download the file\n      const url = window.URL.createObjectURL(new Blob([json]));\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.setAttribute(\"download\", \"output.json\");\n      document.body.appendChild(link);\n      link.click();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Table Name:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: tableName,\n      onChange: e => setTableName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchColumns,\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [columns.map(column => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Column Name: \", column.column_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Data Type: \", column.data_type]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)]\n      }, column.column_name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)), columns.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Make changes to source definition as necessary:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Column Name\",\n          value: column_name_input,\n          onChange: e => setColumn_name_input(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Data Type\",\n          value: data_type_input,\n          onChange: e => setData_type_input(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"Data Length\",\n          onChange: e => {\n            setSourceDefinition({\n              ...sourceDefinition,\n              columns: sourceDefinition.columns.map(col => col.column_name === \"ID\" ? {\n                ...col,\n                data_length: e.target.value\n              } : col)\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), sourceDefinition.columns.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDownload,\n        children: \"Download\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(Users, \"YpLBa1R9aQ2Y3GvS8Tw4oNvuEF4=\");\n_c = Users;\nexport default Users;\nvar _c;\n$RefreshReg$(_c, \"Users\");","map":{"version":3,"names":["React","useState","axios","Users","tableName","setTableName","columns","setColumns","sourceDefinition","setSourceDefinition","Name","column_name_input","setColumn_name_input","data_type_input","setData_type_input","fetchColumns","response","get","console","log","data","map","col","column_name","data_type","error","handleDownload","updatedSourceDefinition","json","JSON","stringify","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","e","target","value","column","length","data_length"],"sources":["/Users/omaga/Desktop/Current/SqlNodeReactJson 2/frontend/src/pages/Users.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nconst Users = () => {\n  const [tableName, setTableName] = useState(\"\");\n  const [columns, setColumns] = useState([]);\n  const [sourceDefinition, setSourceDefinition] = useState({\n    Name: \"\",\n    columns: [],\n  });\n  const [column_name_input, setColumn_name_input] = useState(\"\");\n  const [data_type_input, setData_type_input] = useState(\"\");\n\n  const fetchColumns = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8800/`);\n      console.log(response.data); // log response to console\n      const columns = response.data.map((col) => ({\n        column_name: col.column_name,\n        data_type: col.data_type,\n      }));\n      setColumns(columns);\n      setSourceDefinition({\n        ...sourceDefinition,\n        columns: columns,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleDownload = async () => {\n    try {\n      // Create a new object with the modified sourceDefinition\n      const updatedSourceDefinition = {\n        Name: sourceDefinition.Name,\n        columns: [...sourceDefinition.columns],\n      };\n      updatedSourceDefinition.columns = updatedSourceDefinition.columns.map(\n        (col) => {\n          if (col.column_name === \"ID\") {\n            return {\n              ...col,\n              // Update the column name and data type based on user input\n              column_name: column_name_input,\n              data_type: data_type_input,\n            };\n          }\n          return col;\n        }\n      );\n\n      // Convert the updated sourceDefinition to JSON format\n      const json = JSON.stringify(updatedSourceDefinition, null, 2);\n\n      // Download the file\n      const url = window.URL.createObjectURL(new Blob([json]));\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.setAttribute(\"download\", \"output.json\");\n      document.body.appendChild(link);\n      link.click();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Table Name:</h1>\n      <input\n        type=\"text\"\n        value={tableName}\n        onChange={(e) => setTableName(e.target.value)}\n      />\n      <button onClick={fetchColumns}>Next</button>\n      <div>\n        {columns.map((column) => (\n          <div key={column.column_name}>\n            <p>Column Name: {column.column_name}</p>\n            <p>Data Type: {column.data_type}</p>\n          </div>\n        ))}\n        {columns.length > 0 && (\n          <div>\n            <p>Make changes to source definition as necessary:</p>\n            <input\n              type=\"text\"\n              placeholder=\"Column Name\"\n              value={column_name_input}\n              onChange={(e) => setColumn_name_input(e.target.value)}\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Data Type\"\n              value={data_type_input}\n              onChange={(e) => setData_type_input(e.target.value)}\n            />\n            <input\n              type=\"number\"\n              placeholder=\"Data Length\"\n              onChange={(e) => {\n                setSourceDefinition({\n                  ...sourceDefinition,\n                  columns: sourceDefinition.columns.map((col) =>\n                    col.column_name === \"ID\"\n                      ? { ...col, data_length: e.target.value }\n                      : col\n                  ),\n                });\n              }}\n            />\n          </div>\n        )}\n        {sourceDefinition.columns.length > 0 && (\n          <button onClick={handleDownload}>Download</button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Users;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}