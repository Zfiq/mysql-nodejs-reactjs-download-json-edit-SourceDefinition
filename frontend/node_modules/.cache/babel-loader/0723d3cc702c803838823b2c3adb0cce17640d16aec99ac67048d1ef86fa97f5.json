{"ast":null,"code":"var _jsxFileName = \"/Users/omaga/Desktop/Current/SqlNodeReactJson 2/frontend/src/pages/Users.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Users = () => {\n  _s();\n  const [tableName, setTableName] = useState(\"\");\n  const [columns, setColumns] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [sourceDefinition, setSourceDefinition] = useState({\n    Name: \"\",\n    columns: []\n  });\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\n  const [newColumnName, setNewColumnName] = useState(\"\");\n  const [newColumnType, setNewColumnType] = useState(\"\");\n  const fetchColumns = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8800/`);\n      const columns = response.data.map(col => ({\n        column_name: col.column_name,\n        data_type: col.data_type\n      }));\n      setColumns(columns);\n      setSourceDefinition({\n        ...sourceDefinition,\n        columns: columns\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const handleColumnSelect = column_name => {\n    setSelectedColumn(column_name);\n  };\n  const handleChange = event => {\n    setInputValue(event.target.value);\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const value = inputValue;\n    // Send inputValue to server using fetch or axios\n    const response = await axios.post(\"http://localhost:8800/\", {\n      value\n    });\n    console.log(response.data);\n  };\n  const [newColumnValues, setNewColumnValues] = useState({\n    columnName: \"\",\n    columnType: \"\"\n  });\n  const [columnNames, setColumnNames] = useState([]);\n  const [showDisplay, setShowDisplay] = useState(false);\n  const handleColumnNameChange = event => {\n    const newColumnName = event.target.value;\n    setNewColumnValues({\n      ...newColumnValues,\n      columnName: newColumnName\n    });\n    setColumnNames([...columnNames, newColumnName]); // add new column name to array\n  };\n\n  const handleConfirmClick = () => {\n    setColumnNames([...columnNames, newColumnValues.columnName]);\n  };\n  const handleConfirm = () => {\n    setShowDisplay(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Table Name:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Load Table:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: tableName,\n      onChange: e => setTableName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchColumns,\n      children: \"Fetch Columns\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Columns:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: columns.map(col => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [col.column_name, \" (\", col.data_type, \")\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onClick: () => handleColumnSelect(col.column_name)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)]\n      }, col.column_name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleConfirmClick,\n      children: \"Confirm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Selected Column Names:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), selectedColumn && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Edit Column:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"New Column Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newColumnName,\n          onChange: e => setNewColumnName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"New Column Type:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newColumnType,\n          onChange: e => setNewColumnType(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleConfirm,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), showDisplay && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"New Column Name: \", newColumnName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"New Column Type: \", newColumnType]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(Users, \"6V1bu0xG8kyX7aCzlvrrqsd4vFI=\");\n_c = Users;\nexport default Users;\nvar _c;\n$RefreshReg$(_c, \"Users\");","map":{"version":3,"names":["React","useState","axios","Users","tableName","setTableName","columns","setColumns","inputValue","setInputValue","sourceDefinition","setSourceDefinition","Name","selectedColumn","setSelectedColumn","newColumnName","setNewColumnName","newColumnType","setNewColumnType","fetchColumns","response","get","data","map","col","column_name","data_type","error","console","log","handleColumnSelect","handleChange","event","target","value","handleSubmit","preventDefault","post","newColumnValues","setNewColumnValues","columnName","columnType","columnNames","setColumnNames","showDisplay","setShowDisplay","handleColumnNameChange","handleConfirmClick","handleConfirm","e"],"sources":["/Users/omaga/Desktop/Current/SqlNodeReactJson 2/frontend/src/pages/Users.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nconst Users = () => {\n  const [tableName, setTableName] = useState(\"\");\n  const [columns, setColumns] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [sourceDefinition, setSourceDefinition] = useState({\n    Name: \"\",\n    columns: [],\n  });\n  const [selectedColumn, setSelectedColumn] = useState(\"\");\n  const [newColumnName, setNewColumnName] = useState(\"\");\n  const [newColumnType, setNewColumnType] = useState(\"\");\n\n  const fetchColumns = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8800/`);\n      const columns = response.data.map((col) => ({\n        column_name: col.column_name,\n        data_type: col.data_type,\n      }));\n      setColumns(columns);\n      setSourceDefinition({\n        ...sourceDefinition,\n        columns: columns,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleColumnSelect = (column_name) => {\n    setSelectedColumn(column_name);\n  };\n\n  const handleChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    const value = inputValue;\n    // Send inputValue to server using fetch or axios\n    const response = await axios.post(\"http://localhost:8800/\", { value });\n    console.log(response.data);\n  };\n  const [newColumnValues, setNewColumnValues] = useState({\n    columnName: \"\",\n    columnType: \"\",\n  });\n  const [columnNames, setColumnNames] = useState([]);\n  const [showDisplay, setShowDisplay] = useState(false);\n\n  const handleColumnNameChange = (event) => {\n    const newColumnName = event.target.value;\n    setNewColumnValues({ ...newColumnValues, columnName: newColumnName });\n    setColumnNames([...columnNames, newColumnName]); // add new column name to array\n  };\n\n  const handleConfirmClick = () => {\n    setColumnNames([...columnNames, newColumnValues.columnName]);\n  };\n  const handleConfirm = () => {\n    setShowDisplay(true);\n  };\n  return (\n    <div>\n      <h1>Table Name:</h1>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" value={inputValue} onChange={handleChange} />\n        <button type=\"submit\">Submit</button>\n      </form>\n      <h1>Load Table:</h1>\n      <input\n        type=\"text\"\n        value={tableName}\n        onChange={(e) => setTableName(e.target.value)}\n      />\n      <button onClick={fetchColumns}>Fetch Columns</button>\n      <br />\n      <h1>Columns:</h1>\n      <ul>\n        {columns.map((col) => (\n          <li key={col.column_name}>\n            {col.column_name} ({col.data_type})\n            <input\n              type=\"text\"\n              onClick={() => handleColumnSelect(col.column_name)}\n            />\n          </li>\n        ))}\n      </ul>\n      <button onClick={handleConfirmClick}>Confirm</button>\n      <h1>Selected Column Names:</h1>\n\n      {selectedColumn && (\n        <>\n          <br />\n          <h1>Edit Column:</h1>\n          <label>\n            New Column Name:\n            <input\n              type=\"text\"\n              value={newColumnName}\n              onChange={(e) => setNewColumnName(e.target.value)}\n            />\n          </label>\n          <br />\n          <label>\n            New Column Type:\n            <input\n              type=\"text\"\n              value={newColumnType}\n              onChange={(e) => setNewColumnType(e.target.value)}\n            />\n          </label>\n          <button onClick={handleConfirm}>Confirm</button>\n\n          {showDisplay && (\n            <div>\n              <p>New Column Name: {newColumnName}</p>\n              <p>New Column Type: {newColumnType}</p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Users;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}